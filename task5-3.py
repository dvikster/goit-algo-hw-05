import timeit
import requests
import os

def download_file(url):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª —ñ–∑ Google Drive –∑–∞ –ø—Ä—è–º–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –≤–º—ñ—Å—Ç"""
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É {url}")
        return ""

def boyer_moore(text, pattern):
    """–ê–ª–≥–æ—Ä–∏—Ç–º –ë–æ—î—Ä–∞-–ú—É—Ä–∞ –¥–ª—è –ø–æ—à—É–∫—É –ø—ñ–¥—Ä—è–¥–∫–∞ –≤ —Ç–µ–∫—Å—Ç—ñ"""
    m = len(pattern)
    n = len(text)

    if m == 0:
        return -1  

    skip = [m] * 65536  
    for k in range(m - 1):
        skip[ord(pattern[k])] = m - k - 1  

    k = m - 1
    while k < n:
        j = m - 1
        i = k
        while j >= 0 and text[i] == pattern[j]:  
            j -= 1
            i -= 1
        if j == -1:
            return i + 1  
        k += skip[ord(text[k])]  
    return -1  

def knuth_morris_pratt(text, pattern):
    """–ê–ª–≥–æ—Ä–∏—Ç–º –ö–Ω—É—Ç–∞-–ú–æ—Ä—Ä—ñ—Å–∞-–ü—Ä–∞—Ç—Ç–∞"""
    def compute_lps(pattern):
        """–û–±—á–∏—Å–ª–µ–Ω–Ω—è LPS-–º–∞—Å–∏–≤—É"""
        lps = [0] * len(pattern)
        length = 0  
        i = 1
        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    m = len(pattern)
    n = len(text)
    lps = compute_lps(pattern)
    i = j = 0  

    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1
        if j == m:
            return i - j  
        elif i < n and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]  
            else:
                i += 1
    return -1  

def rabin_karp(text, pattern):
    """–ê–ª–≥–æ—Ä–∏—Ç–º –†–∞–±—ñ–Ω–∞-–ö–∞—Ä–ø–∞"""
    d = 256  
    q = 101  
    m = len(pattern)
    n = len(text)
    p = 0  
    t = 0  
    h = 1

    for i in range(m - 1):
        h = (h * d) % q

    for i in range(m):
        p = (d * p + ord(pattern[i])) % q
        t = (d * t + ord(text[i])) % q

    for i in range(n - m + 1):
        if p == t:
            if text[i:i + m] == pattern:
                return i  
        if i < n - m:
            t = (d * (t - ord(text[i]) * h) + ord(text[i + m])) % q
            if t < 0:
                t += q  
    return -1  

def measure_time(algorithm, text, pattern):
    """–í–∏–º—ñ—Ä—é—î —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ—à—É–∫—É"""
    return timeit.timeit(lambda: algorithm(text, pattern), number=10)

if __name__ == "__main__":
    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª–∏ Google Drive
    article1_url = "https://drive.google.com/uc?id=18_R5vEQ3eDuy2VdV3K5Lu-R-B-adxXZh"
    article2_url = "https://drive.google.com/uc?id=18BfXyQcmuinEI_8KDSnQm4bLx6yIFS_w"

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç–∏ —Å—Ç–∞—Ç–µ–π
    text1 = download_file(article1_url)
    text2 = download_file(article2_url)

    # –û–∫—Ä–µ–º—ñ —ñ—Å–Ω—É—é—á—ñ –ø—ñ–¥—Ä—è–¥–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç–∞—Ç—Ç—ñ
    existing_substring_1 = "–ú–µ—Ç–æ—é —Ä–æ–±–æ—Ç–∏ —î –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —É –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ö –º–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è."  # –ú–∞—î –±—É—Ç–∏ —É –ø–µ—Ä—à—ñ–π —Å—Ç–∞—Ç—Ç—ñ
    existing_substring_2 = "—Å–∞–º–µ —Å—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö –º–∞—î –≤–∏—Å–æ–∫—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"  # –ú–∞—î –±—É—Ç–∏ —É –¥—Ä—É–≥—ñ–π —Å—Ç–∞—Ç—Ç—ñ
    fake_substring = "–≤–∏–≥–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫, —è–∫–∏–π –Ω–µ —ñ—Å–Ω—É—î"  # –í—ñ–¥—Å—É—Ç–Ω—ñ–π —É –æ–±–æ—Ö —Å—Ç–∞—Ç—Ç—è—Ö

    # –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    algorithms = {
        "–ë–æ—î—Ä–∞-–ú—É—Ä–∞": boyer_moore,
        "–ö–Ω—É—Ç–∞-–ú–æ—Ä—Ä—ñ—Å–∞-–ü—Ä–∞—Ç—Ç–∞": knuth_morris_pratt,
        "–†–∞–±—ñ–Ω–∞-–ö–∞—Ä–ø–∞": rabin_karp
    }

    # –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
    results = []

    print("\nüìä **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å** üìä")
    print(f"{'–ê–ª–≥–æ—Ä–∏—Ç–º':<22}{'–°—Ç–∞—Ç—Ç—è':<10}{'–Ü—Å–Ω—É—é—á–∏–π (—Å–µ–∫)':<20}{'–í–∏–≥–∞–¥–∞–Ω–∏–π (—Å–µ–∫)':<20}")
    print("=" * 72)

    for name, algorithm in algorithms.items():
        time_existing_1 = measure_time(algorithm, text1, existing_substring_1)
        time_fake_1 = measure_time(algorithm, text1, fake_substring)
        
        time_existing_2 = measure_time(algorithm, text2, existing_substring_2)
        time_fake_2 = measure_time(algorithm, text2, fake_substring)

        print(f"{name:<22}{'1':<10}{time_existing_1:<20.6f}{time_fake_1:<20.6f}")
        print(f"{name:<22}{'2':<10}{time_existing_2:<20.6f}{time_fake_2:<20.6f}")

        results.append(f"| {name:<20} | 1      | {time_existing_1:.6f} | {time_fake_1:.6f} |")
        results.append(f"| {name:<20} | 2      | {time_existing_2:.6f} | {time_fake_2:.6f} |")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Markdown-–∑–≤—ñ—Ç—É
    md_content = f"""# –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –ø–æ—à—É–∫—É –ø—ñ–¥—Ä—è–¥–∫–∞

## 1. –í—Å—Ç—É–ø
–ë—É–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —Ç—Ä–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–æ—à—É–∫—É –ø—ñ–¥—Ä—è–¥–∫–∞ –Ω–∞ –¥–≤–æ—Ö —Å—Ç–∞—Ç—Ç—è—Ö —ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –¥–≤–æ—Ö –ø—ñ–¥—Ä—è–¥–∫—ñ–≤:
- **–î–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–∞—Ç—Ç—ñ**: `{existing_substring_1}`
- **–î–ª—è –¥—Ä—É–≥–æ—ó —Å—Ç–∞—Ç—Ç—ñ**: `{existing_substring_2}`
- **–û–¥–∏–Ω –≤–∏–≥–∞–¥–∞–Ω–∏–π —Ä—è–¥–æ–∫**: `{fake_substring}`

## 2. –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
| –ê–ª–≥–æ—Ä–∏—Ç–º               | –°—Ç–∞—Ç—Ç—è | –Ü—Å–Ω—É—é—á–∏–π (—Å–µ–∫) | –í–∏–≥–∞–¥–∞–Ω–∏–π (—Å–µ–∫) |
|------------------------|--------|----------------|-----------------|
{"\n".join(results)}

## 3. –í–∏—Å–Ω–æ–≤–∫–∏
- **–ë–æ—î—Ä–∞-–ú—É—Ä–∞** –ø–æ–∫–∞–∑–∞–≤ –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ç–µ—Å—Ç—ñ–≤.
- **–ö–Ω—É—Ç–∞-–ú–æ—Ä—Ä—ñ—Å–∞-–ü—Ä–∞—Ç—Ç–∞** —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π, –∞–ª–µ —Ç—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π.
- **–†–∞–±—ñ–Ω–∞-–ö–∞—Ä–ø–∞** –¥–æ–±—Ä–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –º–Ω–æ–∂–∏–Ω–Ω–æ–≥–æ –ø–æ—à—É–∫—É, –∞–ª–µ –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ö–µ—à-–∫–æ–ª—ñ–∑—ñ—è–º–∏.

### **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è**:  
–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —à–≤–∏–¥–∫–∏–π —ñ –Ω–∞–¥—ñ–π–Ω–∏–π –ø–æ—à—É–∫ –ø—ñ–¥—Ä—è–¥–∫—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ **–ë–æ—î—Ä–∞-–ú—É—Ä–∞**.

---
"""

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è Markdown-–∑–≤—ñ—Ç—É
    md_filename = "substring_search_report.md"
    with open(md_filename, "w", encoding="utf-8") as f:
        f.write(md_content)

    print(f"\n‚úÖ Markdown-–∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: {md_filename}")
